__author__ = 'User'

from sklearn.ensemble import RandomForestClassifier
import pickle
import xml.etree.ElementTree as etree
from subprocess import check_output as qx
import mysql.connector

def get_predictor(stock, date):
    file = open('E:\depth_' + date + '_2015.csv.pkl', 'rb')
    data = pickle.load(file)
    model = data[0]
    code = data[1]
    return model[code.index(stock)]

ltp = 0#last traded price

def profit_analysis(final_orders, codes):
    global ltp
    profit = 0
    for cdx in range(0, codes.__len__()):
        orders = final_orders[cdx]
        if orders[0][0] == codes[cdx]:
            buy = 0
            sell = 0
            buy_q = 0
            sell_q = 0
            for i in range(0, orders.__len__()):
                if orders[i][1] == "B":
                    buy += orders[i][2] * orders[i][3]
                    buy_q += orders[i][2]
                else:
                    sell += orders[i][2] * orders[i][3]
                    sell_q += orders[i][2]
            if buy_q != sell_q:
                if buy_q > sell_q:
                    buy += float(ltp) * (buy_q - sell_q)
                else:
                    sell += float(ltp) * (sell_q - buy_q)
            profit += sell - buy
            #print(codes[cdx])
            #print(sell - buy)
    return profit


def get_portfolio(type, code):
    try:
        cnx = mysql.connector.connect(user='root', password='root', database='test')
        cursor = cnx.cursor()
        if type == "B":
            query = 'SELECT code, type, quantity, ltp, id from `test`.`portfolio` where status = "P" and type = "B" and code = "' + code + '" order by ltp desc;'
        elif type == "S":
            query = 'SELECT code, type, quantity, ltp, id from `test`.`portfolio` where status = "P" and type = "S" and code = "' + code + '" order by ltp asc;'
        cursor.execute(query)
        data = list(cursor)
        cursor.close()
        cnx.close()
    except:
        data = []
    return data


def write_portfolio(code, type, quantity, ltp, status):
    cnx = mysql.connector.connect(user='root', password='root', database='test')
    cursor = cnx.cursor()
    query = 'insert into `portfolio` values("' + code + '", "' + type + '", ' + str(quantity) + ', "' + status + '", ' + str(ltp) + ', 0);'
    cursor.execute(query)
    cnx.commit()
    cursor.close()
    cnx.close()


def short_portfolio(id):
    cnx = mysql.connector.connect(user='root', password='root', database='test')
    cursor = cnx.cursor()
    query = 'update `portfolio` set status = "E" where id = ' + str(id) + ';'
    cursor.execute(query)
    cnx.commit()
    cursor.close()
    cnx.close()


def get_data(code):
    fp = open("E:\depth\\" + code + ".txt")
    xmlf = ""
    feat = []
    for i, line in enumerate(fp):
        if i in range(8, 129):
            xmlf += line
        elif i > 128:
            break
    fp.close()
    root = etree.fromstring(xmlf)
    counter = 0
    for child in root:
        if counter == 0:
            temp = child.text
        elif counter == 13:
            feat.append(temp)
            global ltp
            ltp = temp
        else:
            feat.append(child.text)
        counter += 1
    return feat[0:42]

q_flag = 15


def return_predictions(code, model, feat):
    type = model.predict(feat)
    global q_flag
    if type[0] == "s1":
        if q_flag == 15:
            return [code, "S", 20, float(feat[12]), 0]
        elif q_flag == 6:
            q_flag = 15
            return [code, "S", 10, float(feat[12]), 0]
        else:
            q_flag = 6
            return [code, "S", 2, float(feat[12]), 0]
    elif type[0] == "b1":
        if q_flag == 15:
            return [code, "B", 20, float(feat[12]), 0]
        elif q_flag == 6:
            q_flag = 15
            return [code, "B", 10, float(feat[12]), 0]
        else:
            q_flag = 6
            return [code, "B", 2, float(feat[12]), 0]
    else:
        return [code, "X", 1, float(feat[12]), 0]


def get_money():
    cmd = r'C:\Users\User\Desktop\ShareKhan\get_money\Debug\get_money.exe'
    return float(qx(cmd))


def place_order(stock, type, qty):
    cmd = r'C:\Users\User\Desktop\ShareKhan\place_oder\Debug\place_oder.exe'
    arg = "afterhour=N&s=" + stock + "&ex=NSE&b=" + type +"&qty=" + str(qty) + "&price=0"
    argument = [cmd, arg]
    qx(argument)


def combine_rfs(rf_a, rf_b):
    rf_a.estimators_ += rf_b.estimators_
    rf_a.n_estimators = len(rf_a.estimators_)
    return rf_a


code = ["CANBK"]
order_limit = 5
power = 50000

model = get_predictor(code[0], '31_03')
model2 = get_predictor(code[0], '01_04')
model = combine_rfs(model, model2)

while 1:
    i = 0
    buy_orders = get_portfolio("B", code[i])
    sell_orders = get_portfolio("S", code[i])
    short_qty = 0
    try:
        data = [return_predictions(code[i], model, get_data(code[i]))]
    except:
        continue
    try:
        b_min = min([row[3] for row in buy_orders])
    except:
        b_min = 999999999
    try:
        b_qty = sum([row[2] for row in buy_orders])
    except:
        b_qty = 0
    try:
        s_max = max([row[3] for row in sell_orders])
    except:
        s_max = -1
    try:
        s_qty = sum([row[2] for row in sell_orders])
    except:
        s_qty = 0
    try:
        b_counter = buy_orders.__len__()
    except:
        b_counter = 0
    try:
        s_counter = sell_orders.__len__()
    except:
        s_counter = 0

    if data[i][1] == 'B' and data[i][3] <= b_min - 0.5 and b_counter < order_limit and power - (data[i][3] * data[i][2]) > 0:
        if s_qty != 0:
            for row in sell_orders:
                if row[3] > 0.6 + data[i][3]:
                    short_qty += row[2]
                    short_portfolio(row[4])
                else:
                    break
            if short_qty != 0:
                write_portfolio(data[i][0], "B", short_qty, data[i][3], "E")
                place_order(data[i][0], "BM", short_qty)
        else:
            b_min = min(b_min, data[i][3])
            write_portfolio(data[i][0], "B", data[i][2], data[i][3], "P")
            place_order(data[i][0], "BM", data[i][2])
            power = get_money()
    elif data[i][1] == 'S' and data[i][3] >= s_max + 0.5 and s_counter < order_limit and power - (data[i][3] * data[i][2]) > 0:
        if b_qty != 0:
            for row in buy_orders:
                if row[3] < data[i][3] - 0.6:
                    short_qty += row[2]
                    short_portfolio(row[4])
                else:
                    break
            if short_qty != 0:
                write_portfolio(data[i][0], "S", short_qty, data[i][3], "E")
                place_order(data[i][0], "SM", short_qty)
        else:
            s_max = max(s_max, data[i][3])
            write_portfolio(data[i][0], "S", data[i][2], data[i][3], "P")
            place_order(data[i][0], "SM", data[i][2])
            power = get_money()
    else:
        if s_qty != 0 and s_qty > b_qty:
            for row in sell_orders:
                if row[3] > 0.6 + data[i][3]:
                    short_qty += row[2]
                    short_portfolio(row[4])
                else:
                    break
            if short_qty != 0:
                write_portfolio(data[i][0], "B", short_qty, data[i][3], "E")
                place_order(data[i][0], "BM", short_qty)
        elif b_qty != 0 and b_qty > s_qty:
            for row in buy_orders:
                if row[3] < data[i][3] - 0.6:
                    short_qty += row[2]
                    short_portfolio(row[4])
                else:
                    break
            if short_qty != 0:
                write_portfolio(data[i][0], "S", short_qty, data[i][3], "E")
                place_order(data[i][0], "SM", short_qty)
    #if profit_analysis(final_orders, code) < -1000:
        #break
